---
title: "In-class Exercise"
editor: visual
---

## Overview

This is in-class exercise 1

## Getting Started

The code chunk below will install and load tidyverse and sf packages.

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep)
```

Need to specify pacman as it is not loaded in the library. So the program know which package to use.

This wrapper will avoid typing multiple 'library' to load multiple packages.

## Importing Geospatial Data

### Importing Shapefile into R Environment

This code chunk will import ESRI shapefile into R.

```{r}
hunan_sf <- st_read(dsn = "data/geospatial",layer = "Hunan")
```

### Importing Attribute Data in csv into R Enviroment

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Performing Relational Join

Using *left_join()* of dplyr package

```{r}
hunan <- left_join(hunan_sf, hunan2012)
```

### Visualizing Regional Development Indicator

Prepare Basemap and a Chloropleth Map

```{r}
basemap <- tm_shape(hunan) + tm_polygons() + tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp = 1, ncol = 2)
```

## Computing Contiguity Spatial Weights

Use *poly2nb()* of spdep package to compute contiguity weight matrices of the study area. It builds a neighbours list based on the regions with contiguous boundaries. Default value for arguement 'queen' is 'TRUE'.

### Computing (QUEEN) contiguity based neighbours

Compute Queen contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

1 unit (85) has 11 neighbors

2 units (30, 65) have only 1 neighor.

Total got 88 units.

wm_q list all neighboring polygons for each polygon in the polygon object. First polygon with index 1.

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors

Retrieve country name of Polygon ID = 1

```{r}
hunan$County[1]
```

Reveal county names of 5 neighboring polygons

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

Retrieve the GDPPC of the above 5 counties

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Display completeweight matrix by using *str()*

```{r}
str(wm_q)
```

### Creating (ROOK) contiguity based neighbors

Compute Rook contiguity weight matrix

```{r}
wm_r <- poly2nb(hunan, queen = FALSE)
summary(wm_r)
```

### Visualizing Contitguity Weights 

A connectivity graph takes a point and displays a line to each neighboring point. Using polygon centroids (most typical method) to get points to make the connectivity graphs.

Calculating polygon centroids (get Latitude and Longitude) using the sf package

Need to associate each polygon with points before making the connectivity graph. Need the coordinate in a separate data frame. Mapping function applies a given function to each element of a vector and returns a vector of the same length.

Input vector - geometry column of us.bound

Function - st_centroid

Using map_dbl variation of map from purrr package

Using double bracket notation \[\[\]\] and 1 to get longitude value from the map created from st_centroid function over the geometry column of us.bound

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Do the same for latitude using the same method but using 2

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Use cbind to put them into the same object

```{r}
coords <- cbind(longitude, latitude)
```

Check the format

```{r}
head(coords)
```

### Plotting Queen Contiguity based on Neighbors Map

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

Plotting Rook Contiguity based on Neighbors Map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Plotting both Queen and Rook Contiguity based on Neighbors Maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## Computing Distance Based Neighbors

Derive distance-based weight matrices by using *dnearneigh(* of spdep package

Function identifies neighbors of region points by Euclidean distance with a distance band with lower d1 and upper d2 bounds controlled by the bounds argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two columns matrix and longlat=TRUE, great circle distances in KM will be calculated assuming WGS84 reference ellipsoid.

### Determine the Cut-Off Distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing Fixed Distance Weight Matrix

Compute distance weight matrix using *dnearneigh()*

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Use *str()* to display the content of wm_d62 weight matrix

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine *table()* and *card()* of spdep

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

### Plotting Fixed Distance Weight Matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

Red line - 1st nearest neighbor

Black line - links of neighbors within 62km cut off

Alternative, plot both next to each other

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### Computing Adaptive Distance Weight Matrix

Control the numbers of neighbors directly using k-nearest neighbors, either accepting asymmetric neighbors or imposing symmetry

```{r}
knn6 <- knn2nb(knearneigh(coords, k = 6))
knn6
```

Display the content of the matrix

```{r}
str(knn6)
```

### Plotting Distance Based Neighbors

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weight Based on Inverse Distance Weight (IDW)

First, compute distances between areas using *nbdists()* of spdep package

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row Standardized Weights Matrix

Assign weight to each neighboring polygon. Assign equal weight (style="W"). Assigning fraction 1/number of neighbors to each neighboring county then summing the weighted income values.

While this is the most intuitive way to summaries the neighbors\' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

See weight of the first polygon's four neighbors type

```{r}
rswm_q$weights[1]
```

Each neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor\'s income will be multiplied by 0.2 before being tallied.

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

In this section, you will learn how to create four different spatial lagged variables, they are:

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average, and spatial window sum.

### Spatial Lag with Row Standardized Weights

Compute the average GDPPC value for each polygon commonly refer as **spatially lagged values**

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Append the spatially lag GDPPC values onto hunan sf data frame

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

Plot both GDPPC and spatial lag GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial Lag as a Sum of Neighboring Values

Calculating spatial lag as a sum of neigboring values by assigning binary weights.

We start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, glist = b_weights, style = "B")
b_weights2
```

With the proper weights assigned, use lag.listw to compute a lag variable from the weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

Examine the result

```{r}
lag_sum
```

Append the lag_sum GDPPC field into hunan sf data frame

```{r}
hunan <- left_join(hunan, lag.res)
```

Plot both the *GDPPC* and *Spatial Lag Sum GDPPC* for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial Window Average

Uses row standardized weights and includes the diagonal element. Need to add the diagonal element before assigning weights. Assign k6 to a new variable as structure will be altered directly to add the diagonal elements.

```{r}
wm_q1 <- wm_q
```

Add the diagonal element to the neighbor list using *include.self()* from spdep package

```{r}
include.self(wm_q1)
```

Obtain weights using *nb2listw()*

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

Create the lag variable from our weight structure and GDPPC variable

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1, hunan$GDPPC)
lag_w_avg_gpdpc
```

Convert the lag variable listw object into a data.frame by using *as.data.frame()*

```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Note: The third command line on the code chunk above renames the field names of *lag_wm_q1.res* object into *NAME_3* and *lag_window_avg GDPPC* respectively.

Append lag_window_avg GDPPC values on hunan sf data frame by using *left_join()*

```{r}
hunan <- left_join(hunan, lag_wm_q1.res)
```

Plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Spatial Window Sum

The spatial window sum is the counter part of the window average without using row-standardized weights. Assign binary weights to the neighbor structure that includes the diagonal element.

```{r}
wm_q1 <- wm_q
```

Add diagonal element to the neighbor list

```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

Assign binary weights to the neighbor structure including the diagonal element

```{r}
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
```

Assign weight explicitly using *nb2listw()* and *glist()*

```{r}
b_weights2 <- nb2listw(wm_q1, glist = b_weights, style = "B")
b_weights2
```

Compute the lag variable with *lag.listw()*

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Convert the lag variable listw object into a data.frame by using *as.data.frame()*

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Append *w_sum GDPPC* values onto *hunan* sf data.frame

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```
