---
title: "Hands-on_Ex2"
editor: visual
---

## Overview

This is hands-on exercise 2

## Getting Started

In spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be "is there sign of spatial clustering?". And, if the answer for this question is yes, then our next question will be "where are these clusters?"

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)

The code chunk below will install and load tidyverse, tmap, spdep and sf packages.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Importing Geospatial Data

### Importing Shapefile into R Environment

This code chunk will import ESRI shapefile into R.

```{r}
hunan_sf <- st_read(dsn = "data/geospatial",layer = "Hunan")
```

### Importing Attribute Data in csv into R Enviroment

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Performing Relational Join

Using *left_join()* of dplyr package

```{r}
hunan <- left_join(hunan_sf, hunan2012)
```

### Visualizing Regional Development Indicator

Prepare Basemap and a Chloropleth Map

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## Global Spatial Autocorrelation

Compute global spatial autocorrelation statistic and to perform spatial complete randomness test for global spatial autocorrelation

### Computing Contiguity Spatial Weights

Compute Queen contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

1 unit (85) has 11 neighbors

2 units (30, 65) have only 1 neighor.

Total got 88 units.

### Row-standardized Weights Matrix

Assign weight to each neighboring polygon. Assign equal weight (style="W"). Assigning fraction 1/number of neighbors to each neighboring county then summing the weighted income values.

While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

The input of *nb2listw()* must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.

-   *style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

## Global Spatial Autocorrelation: Moran's I

Perform Moran's I statistic using *moran_test()* of spdep package.

### Moran's I Test

```{r}
moran.test(hunan$GDPPC, listw = rswm_q, zero.policy = TRUE, na.action = na.omit)
```

### Computing Monte Carlo Moran's I

Perform permutation test for Moran's I statistic using *moran.mc()* of spdep package. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm = moran.mc(hunan$GDPPC, listw = rswm_q, nsim = 999, zero.policy = TRUE, na.action = na.omit)
bperm
```

### Visualizing Monte Carlo Moran's I

Examine the simulated Moran's I test statistics in greater detail.

Plotting the distribution of the statistical values as histogram.

Mean

```{r}
mean(bperm$res[1:999])
```

Variance

```{r}
var(bperm$res[1:999])
```

Interquartile

```{r}
summary(bperm$res[1:999])
```

Histogram

```{r}
hist(bperm$res, freq = TRUE, breaks = 20, xlab = "Simulated Moran's I")
abline(v = 0, col = "red")
```

## Global Spatial Autocorrelation: Geary's

Perform Geary's c statistics testing using appropriate functions of spdep package.

### Geary's c Test

Perform Geary's c test for spatial autocorrelation using *geary.test()I* of spdep package

```{r}
geary.test(hunan$GDPPC, listw = rswm_q)
```

### Computing Monte Carlo Geary's C

Perform permutation test for Geary's C statistic using *geary.mc()* of spdep package.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, listw=rswm_q, nsim=999)
bperm
```

### Visualizing the Monte Carlo Geary's C

Plot histogram to reveal the distribution of the simulated values

Mean

```{r}
mean(bperm$res[1:999])
```

Variance

```{r}
var(bperm$res[1:999])
```

Interquartile

```{r}
summary(bperm$res[1:999])
```

Histogram

```{r}
hist(bperm$res, freq = TRUE, breaks = 20, xlab = "Simulated Geary's C")
abline(v = 1, col = "red")
```

## Spatial Correlogram

Great for examining patterns of spatial autocorrelation in the data or model residuals. Show the effect of distance(lag) between pair of spatial observations on correlation. Plot of some index of autocorrelation against distance. Useful as an exploratory and descriptive tool. Provide richer information than variogram.

### Compute Moran's I Correlogram

Compute a 6-lag spatial correlogram of GDPPC using *sp.correlogram()* of spdep package. Global spatial autocorrelation used in Moran's I.

```{r}
MI_corr <- sp.correlogram(wm_q, hunan$GDPPC, order=6, method="I", style="W")
plot(MI_corr)
```

Not all autocorrelation values are statistically significant and therefore, may not provide a complete interpretation by plotting the output. Important to examine the full analysis report by printing out the analysis results.

```{r}
print(MI_corr)
```

### Compute Geary's C Correlogram and Plot

Compute a 6-lag spatial correlogram of GDPPC using *sp.correlogram()* of spdep package. Global spatial autocorrelation used in Geary's C.

```{r}
GC_corr <- sp.correlogram(wm_q, hunan$GDPPC, order=6, method="C", style="W")
plot(GC_corr)
```

Print out analysis report for better interpretation.

```{r}
print(GC_corr)
```

## Cluster and Outlier Analysis

Local Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable

Apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran'I to detect cluster and/or outlier

### Compute Local Moran's I

Compute local Moran's I using *localmoran()* of spdep package.

It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

List the content of the local Moran matrix derived by using *printCoefmat()*

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

### Mapping the local Moran's I

Append the local Moran's I data frame onto SpatialPolygonDataFrame

```{r}
hunan.localMI <- cbind(hunan,localMI) %>% rename(Pr.Ii = Pr.z....E.Ii..)
```

### Mapping local Moran's I Values

Plot local Moran's I values

```{r}
tm_shape(hunan.localMI) + tm_fill(col = "Ii", style = "pretty", palette = "RdBu", title = "local moran statistics") + tm_borders(alpha = 0.5)
```

### Mapping local Moran's I p-values

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.

Plot a chloropleth map of Moran's I p-values using tmap functions

```{r}
tm_shape(hunan.localMI) + tm_fill(col = "Pr.Ii", breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), palette="-Blues", title = "local Moran's I p-values") + tm_borders(alpha = 0.5)
```

### Mapping both local Moran's I Values and p-values

Plot both the local Moran's I values map and its corresponding p-values map next to each other for effective interpretation

```{r}
localMI.map <- tm_shape(hunan.localMI) + tm_fill(col = "Ii", style = "pretty", title = "local moran statistics") + tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) + tm_fill(col = "Pr.Ii", breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), palette="-Blues", title = "local Moran's I p-values") + tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## Creating a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### Plotting Moran Scatterplot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

Plot the Moran scatterplot using *moran.plot()* of spdep packaging

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q, labels=as.character(hunan$County), xlab="GDPPC 2012", ylab="Spatially Lag GDPPC 2012")
```

Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.

### Plotting Moran Scatterplot with Standardized Variables

Use *scale()* to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector
```

The *as.vector()* added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out data frame.

Plot the Moran scatterplot

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q, labels=as.character(hunan$County), xlab="z-GDPPC 2012", ylab="Spatially Lag z-GDPPC 2012")
```

### Preparing LISA Map Classes

Steps to prepare a cluster map

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Center the variable of interest around its mean

```{r}
DV <- hunan$GDPPC - mean(hunan$GDPPC)
```

Centering the local Moran's around the mean

```{r}
C_mI <- localMI[,1] - mean(localMI[,1])
```

Set a statistical significance level of the local Moran

```{r}
signif <- 0.05
```

These four command lines define the high-high, low-low, low-high and high-low categories

```{r}
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 2      
quadrant[DV <0 & C_mI>0] <- 1
quadrant[DV >0 & C_mI<0] <- 3
```

Place non-significant Moran in the category 0

```{r}
quadrant[localMI[,5]>signif] <- 0
```

Combined codes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
C_mI <- localMI[,1] - mean(localMI[,1])    
signif <- 0.05       
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 2      
quadrant[DV <0 & C_mI>0] <- 1
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMI[,5]>signif] <- 0
```

### Plotting LISA map

Build the LISA map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) + tm_fill(col = "quadrant", style = "cat", palette = colors[c(sort(unique(quadrant)))+1], labels = clusters[c(sort(unique(quadrant)))+1], popup.vars = c("")) + tm_view(set.zoom.limits = c(11,17)) + tm_borders(alpha=0.5)
```

Plot both the local Moran's I values map and its corresponding p-values map next to each other for effective interpretation

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) + tm_fill(col = "quadrant", style = "cat", palette = colors[c(sort(unique(quadrant)))+1],labels = clusters[c(sort(unique(quadrant)))+1], popup.vars = c("")) + tm_view(set.zoom.limits = c(11,17)) + tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

## Hot Spot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

The term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

### Getis and Ord's G-Statistics

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

### Deriving Distance-Based Weight Matrix

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

### Deriving the centroid

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running *st_centroid()* on the sf object: **us.bound**. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the *st_centroid()* function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

### Determine the Cut-Off Distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbor distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbor.

### Computing Fixed Distance Weight Matrix

Compute distance weight matrix using *dnearneigh()*

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Convert the nb object into spatial weights object using *nb2listw()*

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

### Computing Adaptive Distance Weight Matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Convert the nb object into spatial weights object using *nb2listw()*

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## Computing Gi Statistics

### Gi Statistics using Fixed Distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The output of localG() is a vector of G or Gstar values, with attributes "gstari" set to TRUE or FALSE, "call" set to the function call, and class "localG".

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Join the Gi values to their corresponding sf data frame

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>% rename(gstat_fixed = as.matrix.gi.fixed.)
```

In fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*. Next, *cbind()* is used to join hunan\@data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *hunan.gi*. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.

### Mapping Gi Values with Fixed Distance Weights

Map the Gi values derived using fixed distance weight matrix

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) + tm_fill(col = "gstat_fixed", style = "pretty", palette="-RdBu", title = "local Gi") + tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

### Gi Statistics using Adaptive Distance

Compute the Gi values using an adaptive distance weight matrix, *knb_lw()*

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>% rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with Adaptive Distance Weights

Visualize the locations of hot spot and cold spot areas. Map the Gi values using chloropleth mapping functions of tmap package

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + tm_fill(col = "gstat_adaptive", style = "pretty", palette="-RdBu", title = "local Gi") + tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```
